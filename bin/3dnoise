#!/opt/perl/bin/perl
package renderer;
use common::sense;
use AnyEvent;
use SDL;
use SDLx::App;
use SDL::Mouse;
use SDL::Event;
use OpenGL qw/:all/;
use OpenGL::List;

our $APP;
our $SDLE;
our $W = 800;
our $H = 600;

sub setup {
   $APP = SDLx::App->new (
      title  => "Layered 3D Noise",
      width  => $W,
      height => $H,
      gl     => 1
   );

   SDL::Events::enable_unicode (1);
   $SDLE = SDL::Event->new;
   SDL::Video::GL_set_attribute (SDL::Constants::SDL_GL_SWAP_CONTROL, 1);
   SDL::Video::GL_set_attribute (SDL::Constants::SDL_GL_DOUBLEBUFFER, 1);

   glDepthFunc (GL_LESS);
   glEnable (GL_DEPTH_TEST);
   glDisable (GL_DITHER);

   glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
   glEnable (GL_BLEND);
   glEnable (GL_CULL_FACE);
   glCullFace (GL_BACK);

   glHint (GL_PERSPECTIVE_CORRECTION_HINT, GL_FASTEST);
   glDisable (GL_TEXTURE_2D);
   glDisable (GL_FOG);
   glClearColor (0,0,0,1);
   glClearDepth (1.0);
   glShadeModel (GL_FLAT);
}

our @VERTS;
our $SIDELEN;

our @PARAMS;
our $RECALC;

our ($SKIPV, $CARVE_OFFS);

sub set_recalc_cb {
   my ($o, $lac, $p,  $a, $slen, $sd, $cb) = @_;
   (@PARAMS) = ($o, $lac, $p, $a, $slen, $sd);
   $RECALC = $cb;
   recalc ();
}

sub recalc {
   $SIDELEN = $RECALC->(@PARAMS);
   update_geometry ();
}

sub update_geometry {
   my ($skipv, $carve) = ($SKIPV, $CARVE_OFFS);
   warn "Constructing geometry (@$skipv, carving $carve)\n";
   $carve *= 1;
   main::render_model (@{$skipv || [0,0,0]}, $carve);
}

our @ROTATION;
our @TRANSLAT;

sub default_translation {
   (@TRANSLAT) = (0, 0, -$SIDELEN * 1.5);
}

sub render {
   glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

   glMatrixMode (GL_PROJECTION);
   glLoadIdentity;
   gluPerspective (60, $W / $H, 0.1, 1000);

   glMatrixMode (GL_MODELVIEW);
   glLoadIdentity;
   glPushMatrix;

   glTranslatef (@TRANSLAT);
   glRotatef ($ROTATION[0], 0, 1, 0);
   glRotatef ($ROTATION[1], 1, 0, 0);
   glTranslatef (-($SIDELEN / 2), -($SIDELEN / 2), -($SIDELEN / 2));

   main::show_model ();

   glPopMatrix;
}

sub start_loop {
   my $cv = AE::cv;

   update_geometry;
   default_translation;

   my $ROT;
   my $TRANS;
   my $SKIPL;

   my $keyactions;
   $keyactions = AE::timer 0, 0.02, sub {
      if ($ROT) {
         $ROTATION[0] += $ROT->[0];
         $ROTATION[1] += $ROT->[1];
      }

      if ($TRANS) {
         $TRANSLAT[0] += $TRANS->[0];
         $TRANSLAT[1] += $TRANS->[1];
         $TRANSLAT[2] += $TRANS->[2];
      }
   };

   my $skipanim;
   $skipanim = AE::timer 0, 0.5, sub {
      if ($SKIPL) {
         my $change = grep { $_ > 0 } @$SKIPL;

         for (0..2) {
            $SKIPV->[$_] += $SKIPL->[$_];
            if ($SKIPV->[$_] > $SIDELEN) {
               $SKIPV->[$_] = 0;
            }
         }

         update_geometry if $change
      }
   };

   my $evpoll;
   $evpoll = AE::timer 0, 0.04, sub {
      SDL::Events::pump_events ();

      while (SDL::Events::poll_event ($SDLE)) {
         my $type = $SDLE->type;
         my $key  = ($type == 2 || $type == 3) ? $SDLE->key_sym : "";

         if ($type == 4) { # mouse motion

         } elsif ($type == 2) { # key down
            my $name = SDL::Events::get_key_name ($key);
            ($name eq "q" || $name eq 'escape') and exit;

            if ($name eq 'up') {
               $ROT->[1] += 1;
            } elsif ($name eq 'down') {
               $ROT->[1] -= 1;
            } elsif ($name eq 'left') {
               $ROT->[0] += 1;
            } elsif ($name eq 'right') {
               $ROT->[0] -= 1;
            } elsif ($name eq 'backspace') {
               undef $ROT;
               @ROTATION = (0,0);
               default_translation;
            } elsif ($name eq 'w') {
               $TRANS->[2] += 1;
            } elsif ($name eq 's') {
               $TRANS->[2] -= 1;
            } elsif ($name eq 'a') {
               $TRANS->[0] -= 1;
            } elsif ($name eq 'd') {
               $TRANS->[0] += 1;
            } elsif ($name eq 'v') {
               $SKIPV = [0,0,0];
               $SKIPL = [0,0,0];
               update_geometry;
            } elsif ($name eq 'y') {
               $SKIPL->[0] = not $SKIPL->[0];
            } elsif ($name eq 'x') {
               $SKIPL->[1] = not $SKIPL->[1];
            } elsif ($name eq 'c') {
               $SKIPL->[2] = not $SKIPL->[2];
            } elsif ($name eq '+') {
               $CARVE_OFFS += 0.02;
               update_geometry;
            } elsif ($name eq '-') {
               $CARVE_OFFS -= 0.02;
               update_geometry;
            } elsif ($name eq '#') {
               if ($CARVE_OFFS < 0) {
                  $CARVE_OFFS = (1 + $CARVE_OFFS);
               } else {
                  $CARVE_OFFS = -1 * (1 - $CARVE_OFFS);
               }
               update_geometry;
            } elsif ($name eq 'j') {
               $PARAMS[0] += 1;
               recalc ();
            } elsif ($name eq 'k') {
               $PARAMS[0] -= 1;
               recalc ();
            } elsif ($name eq 'u') {
               $PARAMS[2] += 0.02;
               recalc ();
            } elsif ($name eq 'i') {
               $PARAMS[2] -= 0.02;
               recalc ();
            } elsif ($name eq 'n') {
               $PARAMS[4] += 1;
               recalc ();
            } elsif ($name eq 'm') {
               $PARAMS[4] -= 1;
               recalc ();
            } elsif ($name eq 't') {
               $PARAMS[5] += 1;
               recalc ();
            } elsif ($name eq 'g') {
               $PARAMS[5] -= 1;
               recalc ();
            } elsif ($name eq 'o') {
               $PARAMS[1] += 0.05;
               recalc ();
            } elsif ($name eq 'p') {
               $PARAMS[1] -= 0.05;
               recalc ();
            }

         } elsif ($type == 3) { # key up
            my $name = SDL::Events::get_key_name ($key);

            if ($name eq 'w' || $name eq 's') {
               $TRANS->[2] = 0;
            } elsif ($name eq 'a' || $name eq 'd') {
               $TRANS->[0] = 0;
            } elsif ($name eq 'up' || $name eq 'down') {
               $ROT->[1] = 0;
            } elsif ($name eq 'left' || $name eq 'right') {
               $ROT->[0] = 0;
            }
         } elsif ($type == SDL_MOUSEBUTTONUP) {

         } elsif ($type == SDL_MOUSEBUTTONDOWN) {

         } elsif ($type == 12) {
            warn "Exit event!\n";
            exit;
         } else {
            warn "unknown sdl type: $type\n";
         }
      }
   };


   my $tmr;
   $tmr = AE::timer 0, 0.01, sub {
      render ();
      $APP->sync;
   };

   $cv->recv;
}

package main;
use Inline C =>
       Config
          => LIBS => `sdl-config --libs`
          => INC => `sdl-config --cflags`;
use Inline 'C';
use common::sense;
use GD;

sub layer_3d_noise {
   my ($cubelen, $octaves, $lac, $persistence, $add, $seed) = @_;

   my $n = mk_3d_noise ($cubelen, $seed);

   alloc_model ($cubelen);

   my $amp_correction;
   for (my $i = 0; $i <= $octaves; $i++) {
      my $freq = ($lac) ** ($octaves - $i);
      my $amp = $persistence ** $i;
      $amp_correction += $amp;
      warn "freq $freq, amp $amp\n";
      add_model_sample_layer ($n, $freq, $amp);
   }

   free_3d_noise ($n);

   warn "amp correct $amp_correction\n";
   div_model ($amp_correction);
}


warn "making 3d noise\n";
my $cube = $ARGV[1] || 30;

renderer::setup;
init_c_renderer ();
renderer::set_recalc_cb (1, 2.0, 0.5, 0.03, $cube, $ARGV[0], sub {
   my ($oct, $lac, $pers, $add, $cube, $seed) = @_;
   if (int ($lac) <= 0) {
      $lac = 1;
   }
   warn "calc noise cube size $cube with oct $oct, lac $lac, pers $pers and add $add and seed $seed...\n";
   layer_3d_noise ($cube, $oct, $lac, $pers, $add, $seed);
   warn "done.\n";
   $cube
});
renderer::start_loop;

__END__
__C__
#include <SDL_opengl.h>
#include <math.h>

static int        sidelen     = 0;
static double    *model       = 0;
static GLdouble  *vertexes    = 0;
static GLdouble  *colors      = 0;
static GLuint    *vertex_idx  = 0;
static int        vertex_idxs = 0;
static GLuint dl;
static dl_dirty = 1;
#define OFFS(x,y,z) ((x) + (y) * sidelen + (z) * (sidelen * sidelen))

#define INTSCALE  (128ul)
#define INTSCALE3 (INTSCALE * INTSCALE * INTSCALE)

void init_c_renderer ()
{
  dl = glGenLists (1);
}

void alloc_model (int slen)
{
  if (model)
    {
      free (model);
      free (vertexes);
      free (vertex_idx);
      free (colors);
    }
  sidelen = slen;
  model = malloc (sizeof (double) * sidelen * sidelen * sidelen);
  memset (model, 0, sizeof (double) * sidelen * sidelen * sidelen);

  vertexes   = malloc (sizeof (GLdouble) * (sidelen * sidelen * sidelen) * 6 * 4 * 3);
  vertex_idx = malloc (sizeof (GLuint) * (sidelen * sidelen * sidelen) * 6 * 4);
  colors     = malloc (sizeof (GLdouble) * (sidelen * sidelen * sidelen) * 6 * 4 * 3);
  vertex_idxs = 0;
  //d// printf ("alloc %d %d\n", (sidelen * sidelen * sidelen) * 6 * 4 * 3, (sidelen * sidelen * sidelen) * 6 * 4);
}

void add_model (int x, int y, int z, double v)
{
  model[OFFS(x,y,z)] += v;
}

void div_model (double a)
{
  int i = 0;
  for (i = 0; i <= (OFFS(sidelen - 1,sidelen - 1,sidelen - 1)); i++)
    model[i] /= a;
}

unsigned int quad_vert_idx[6][4] = {
  {0, 1, 2, 3}, // front
  {1, 5, 6, 2}, // top
  {7, 6, 5, 4}, // back
  {4, 5, 1, 0}, // left
  {3, 2, 6, 7}, // right
  {3, 7, 4, 0}, // bottom
};

GLdouble quad_vert[8][3] = {
  { 0, 0, 0 },
  { 0, 1, 0 },
  { 1, 1, 0 },
  { 1, 0, 0 },
  { 0, 0, 1 },
  { 0, 1, 1 },
  { 1, 1, 1 },
  { 1, 0, 1 },
};

GLdouble light[6] = { 0.0, 0.2, 0.25, 0.2, 0.1, 0.1, };

unsigned int rnd_xor (unsigned int x)
{
   x ^= (x << 6);
   x ^= (x >> 3);
   x ^= (x << 17);
   return x;
}

unsigned int hash32int (unsigned int i)
{
  i = (i << 15) - i - 1;
  i = i ^ (i >> 12);
  i = i + (i << 2);
  i = i ^ (i >> 4);
  i = i * 2057;         // key = (key + (key << 3)) + (key << 11);
  i = i ^ (i >> 16);
  return i;
}

unsigned long map_coord2int (unsigned int x, unsigned int y, unsigned int z, unsigned int seed)
{
  unsigned long out = 0;
  unsigned int i = 0;
  while (x > 0 || y > 0 || z > 0)
    {
      out += (x & 0x1) ? (0x1 << i) : 0;
      i++;
      out += (y & 0x1) ? (0x1 << i) : 0;
      i++;
      out += (z & 0x1) ? (0x1 << i) : 0;
      i++;
      x >>= 1;
      y >>= 1;
      z >>= 1;
    }
  return hash32int (hash32int (out) + seed);
}

#define NOISE_ARR_OFFS(slen,x,y,z) (1 + (x) + (y) * slen + (z) * (slen * slen))

void *mk_3d_noise (unsigned int slen, unsigned int seed)
{
   int x, y, z;

   slen++; // sample one more at the edge

   unsigned long *noise_arr =
      malloc (sizeof (unsigned long) * (slen * slen * slen + 1));

   noise_arr[0] = slen;

   for (x = 0; x < slen; x++)
     for (y = 0; y < slen; y++)
       for (z = 0; z < slen; z++)
         {
            noise_arr[NOISE_ARR_OFFS(slen,x,y,z)] =
               rnd_xor (map_coord2int (x, y, z, seed));
         }
   return noise_arr;
}

unsigned long cos_interp (unsigned int a, unsigned int b, double x)
{
   x *= M_PI;
   double ratio = (1 - cos (x)) * 0.5;
   return a * (1 - ratio) + b * ratio;
}

unsigned long linerp (unsigned int a, unsigned int b, double x)
{
   return a * (1 - x) + b * x;
}

unsigned long smoothstep(unsigned int a, unsigned int b, double x)
{
  x = x * x * (3 - 2 * x);
  return a * (1 - x) + b * x;
}

unsigned int linerp_int (unsigned int a, unsigned int b, unsigned int x)
{
   unsigned long i =
        ((unsigned long) a * (INTSCALE - x)) + ((unsigned long) b * x);
   i /= INTSCALE;
   return i;
}

unsigned int smoothstep_int (unsigned int a, unsigned int b, unsigned int x)
{
   unsigned long xs = x;
   xs = xs * xs * ((3 * INTSCALE) - 2 * xs);
   unsigned long i =
          ((unsigned long) a * (INTSCALE3 - xs))
        + ((unsigned long) b * xs);
   i /= INTSCALE3;
   return i;
}

unsigned long sample_3d_noise_at (void *noise, unsigned int x, unsigned int y, unsigned int z, unsigned int scale)
{
   unsigned long *noise_3d = noise;

   // reduces the sampling scale, higher "scale" means less
   // points from noise are looked at and more interpolation

   unsigned int x_rest = (INTSCALE * (x % scale)) / scale;
   x /= scale;
   unsigned int y_rest = (INTSCALE * (y % scale)) / scale;
   y /= scale;
   unsigned int z_rest = (INTSCALE * (z % scale)) / scale;
   z /= scale;

   //d// printf ("red %d %d %d, rest %ud %ud %ud %ud\n", x, y, z, scale, x_rest, y_rest, z_rest);
   unsigned int slen = noise_3d[0];

   if ((z + 1) >= slen
       || (y + 1) >= slen
       || (x + 1) >= slen)
     return 0;

   unsigned int samples[8];
   samples[0] = noise_3d[NOISE_ARR_OFFS(slen,x    , y,     z)];
   samples[1] = noise_3d[NOISE_ARR_OFFS(slen,x + 1, y,     z)];

   samples[2] = noise_3d[NOISE_ARR_OFFS(slen,x    , y + 1, z)];
   samples[3] = noise_3d[NOISE_ARR_OFFS(slen,x + 1, y + 1, z)];

   samples[4] = noise_3d[NOISE_ARR_OFFS(slen,x    , y,     z + 1)];
   samples[5] = noise_3d[NOISE_ARR_OFFS(slen,x + 1, y,     z + 1)];

   samples[6] = noise_3d[NOISE_ARR_OFFS(slen,x    , y + 1, z + 1)];
   samples[7] = noise_3d[NOISE_ARR_OFFS(slen,x + 1, y + 1, z + 1)];

#define cos_interp linerp
#define cos_interp smoothstep
#define cos_interp linerp_int
#define cos_interp smoothstep_int

   samples[0] = cos_interp (samples[0], samples[1], x_rest);
   samples[1] = cos_interp (samples[2], samples[3], x_rest);
   samples[2] = cos_interp (samples[4], samples[5], x_rest);
   samples[3] = cos_interp (samples[6], samples[7], x_rest);

   samples[0] = cos_interp (samples[0], samples[1], y_rest);
   samples[1] = cos_interp (samples[2], samples[3], y_rest);

   return cos_interp (samples[0], samples[1], z_rest);
}

void add_model_sample_layer (void *noise, unsigned int freq, double ampl)
{
  int x, y, z;

  for (x = 0; x < sidelen; x++)
    for (y = 0; y < sidelen; y++)
      for (z = 0; z < sidelen; z++)
        {
          unsigned long s = sample_3d_noise_at (noise, x, y, z, freq);
          double val = (double) s / (double) 0xFFFFFFFF;
          // printf ("SAMPLE AT %d %d %d: %ud => %g\n", x, y, z, s, val);
          add_model (x, y, z, val * ampl);
        }
}

void free_3d_noise (void *noise)
{
  free (noise);
}

void show_model ()
{
   if (!vertex_idxs)
     return;

  if (dl_dirty)
     {
       glNewList (dl, GL_COMPILE);
       glEnableClientState(GL_VERTEX_ARRAY);
       glEnableClientState(GL_COLOR_ARRAY);

       glVertexPointer (3, GL_DOUBLE, 0, vertexes);
       glColorPointer (3, GL_DOUBLE, 0, colors);
       glDrawElements (GL_QUADS, vertex_idxs, GL_UNSIGNED_INT, vertex_idx);

       glDisableClientState(GL_COLOR_ARRAY);
       glDisableClientState(GL_VERTEX_ARRAY);
       glEndList ();
       dl_dirty = 0;
     }

  glCallList (dl);
}

int is_carved (int x, int y, int z, int sx, int sy, int sz, double carve)
{
  if (((x - sx) - 1) < 0
      || ((y - sy) - 1) < 0
      || ((z - sz) - 1) < 0
      || (x + 1) >= sidelen
      || (y + 1) >= sidelen
      || (z + 1) >= sidelen)
    return 1;

  double *cell = &(model[OFFS(x,y,z)]);

  if (carve < 0)
    {
      if (*cell > (1 - -carve))
        return 1;
    }
  else
    {
      if (*cell < carve)
        return 1;
    }

  return 0;
}

void add_face (int f, int x, int y, int z, double color)
{
  int h;

  double face_clr = color + light[f];
  if (face_clr > 1)
    face_clr = 1;

  for (h = 0; h < 4; h++)
    {
      GLdouble *vert = &(quad_vert[quad_vert_idx[f][h]][0]);

      vertexes[vertex_idxs * 3]     = vert[0] + x;
      vertexes[vertex_idxs * 3 + 1] = vert[1] + y;
      vertexes[vertex_idxs * 3 + 2] = vert[2] + z;

      colors[vertex_idxs * 3]     = face_clr;
      colors[vertex_idxs * 3 + 1] = face_clr;
      colors[vertex_idxs * 3 + 2] = face_clr;

      vertex_idx[vertex_idxs] = vertex_idxs;
      vertex_idxs++;
    }
}

void render_model (int skip_x, int skip_y, int skip_z, double carve)
{
  int x, y, z;

  memset (vertex_idx, 0, sizeof (GLuint) * (sidelen * sidelen * sidelen) * 6 * 4);
  vertex_idxs = 0;

  dl_dirty = 1;

  for (x = skip_x; x < sidelen; x++)
    for (y = skip_y; y < sidelen; y++)
      for (z = skip_z; z < sidelen; z++)
        {
          double *cell = &(model[OFFS(x,y,z)]);
          if (is_carved (x, y, z, skip_x, skip_y, skip_z, carve))
            continue;

          if (is_carved (x, y, z - 1, skip_x, skip_y, skip_z, carve))
            add_face (0, x, y, z, *cell);

          if (is_carved (x, y + 1, z, skip_x, skip_y, skip_z, carve))
            add_face (1, x, y, z, *cell);

          if (is_carved (x, y, z + 1, skip_x, skip_y, skip_z, carve))
            add_face (2, x, y, z, *cell);

          if (is_carved (x - 1, y, z, skip_x, skip_y, skip_z, carve))
            add_face (3, x, y, z, *cell);

          if (is_carved (x + 1, y, z, skip_x, skip_y, skip_z, carve))
            add_face (4, x, y, z, *cell);

          if (is_carved (x, y - 1, z, skip_x, skip_y, skip_z, carve))
            add_face (5, x, y, z, *cell);
        }

  printf ("rendered %d vertexes\n", vertex_idxs);
}
